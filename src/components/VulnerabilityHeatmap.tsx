
import { useState } from 'react';

const projects = ['Project Alpha', 'Project Beta', 'Project Gamma', 'Project Delta', 'Project Echo'];
const categories = ['Cyber', 'Ops', 'Finance', 'Compliance', 'Strategic'];

const generateHeatmapData = () => {
  return projects.map(project => ({
    project,
    vulnerabilities: categories.map(category => ({
      category,
      value: Math.floor(Math.random() * 10) + 1,
      description: `${category} risk assessment for ${project}`
    }))
  }));
};

export function VulnerabilityHeatmap() {
  const [heatmapData] = useState(generateHeatmapData());
  const [hoveredCell, setHoveredCell] = useState<{ project: string; category: string } | null>(null);

  const getColorIntensity = (value: number) => {
    if (value <= 3) return 'bg-success-100 text-success-800';
    if (value <= 6) return 'bg-warning-100 text-warning-800';
    return 'bg-danger-100 text-danger-800';
  };

  return (
    <div className="prism-card p-6">
      <div className="mb-4">
        <h3 className="text-lg font-semibold text-navy-800">Project Vulnerability Heatmap</h3>
        <p className="text-sm text-gray-600">Risk intensity across projects and categories</p>
      </div>

      <div className="overflow-x-auto">
        <div className="min-w-full">
          {/* Header */}
          <div className="grid grid-cols-6 gap-1 mb-2">
            <div></div>
            {categories.map(category => (
              <div key={category} className="text-xs font-medium text-gray-600 text-center p-2">
                {category}
              </div>
            ))}
          </div>

          {/* Heatmap Rows */}
          {heatmapData.map(({ project, vulnerabilities }) => (
            <div key={project} className="grid grid-cols-6 gap-1 mb-1">
              <div className="text-xs font-medium text-gray-700 p-2 flex items-center">
                {project}
              </div>
              {vulnerabilities.map(({ category, value }) => (
                <div
                  key={`${project}-${category}`}
                  className={`
                    p-3 rounded text-center text-xs font-medium cursor-pointer
                    transition-all duration-200 hover:scale-105
                    ${getColorIntensity(value)}
                  `}
                  onMouseEnter={() => setHoveredCell({ project, category })}
                  onMouseLeave={() => setHoveredCell(null)}
                >
                  {value}
                </div>
              ))}
            </div>
          ))}
        </div>
      </div>

      {/* Legend */}
      <div className="mt-4 flex items-center justify-center space-x-6 text-xs">
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-success-100 rounded"></div>
          <span className="text-gray-600">Low Risk (1-3)</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-warning-100 rounded"></div>
          <span className="text-gray-600">Medium Risk (4-6)</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-danger-100 rounded"></div>
          <span className="text-gray-600">High Risk (7-10)</span>
        </div>
      </div>
    </div>
  );
}
